% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_custom_format.R
\name{import_custom_format}
\alias{import_custom_format}
\title{Import TPP data from proteomics tabular data into tidier tibble format.}
\usage{
import_custom_format(
  datafile,
  config,
  path = NULL,
  table_format = c("wide", "long"),
  protein_id_col_name = NULL,
  quantity_pattern = NULL,
  experiment_col_name = NULL,
  quantity_col_name = NULL,
  experiment_id_func = NULL,
  pep_n_col_name = NULL,
  match_n_col_name = NULL,
  seq_col_name = NULL,
  seq_col_func = NULL,
  silent = FALSE,
  ...
)
}
\arguments{
\item{datafile}{Character. Specify a filename for a delimited text file or
\emph{.xlsx} spreadsheet containing the protein quantity data.}

\item{config}{Either a character, specifying the file name of a delimited
file with experiment configuration, to be opened with
\link{read.table}/\link[readxl:read_excel]{readxl::read_excel} or a \code{data.frame}/\code{tibble} with
configuration information.

This should take the form of a table with the column names
\emph{Experiment}, \emph{Condition}, \emph{Replicate} and
\emph{Temp}.}

\item{path}{Character. Optionally, the path to a directory containing the
data and configuration files. If given, this will be appended to both paths.}

\item{table_format}{One of "wide" or "long". Are the quantity data in the
file to import presented in a wide format - one column per temperature point
observation, or long - one quantity column, one experimental identifier
column, \emph{e.g.}

\emph{Wide:}\tabular{rrr}{
   Quantity_Sample_01.raw \tab Quantity_Sample_02.raw \tab Quantity_Sample_03.raw \cr
   5434942 \tab 5394587 \tab 4523683 \cr
}


\emph{Long:}\tabular{rr}{
   Experiment \tab Quantity \cr
   Sample_01.raw \tab 5434942 \cr
   Sample_02.raw \tab 5394587 \cr
   Sample_03.raw \tab 4523683 \cr
}}

\item{protein_id_col_name}{Character. The exact name of a column in the data
from which a unique proteinn ID will be taken.}

\item{quantity_pattern}{Character. Regular expression that identifies protein
quantity column(s)}

\item{experiment_col_name}{Character. If \code{table_format = "wide"}, the exact
name of a column in the data from which experiment ID should be taken.}

\item{quantity_col_name}{Character. If \code{table_format = "wide"}, the name of
a column in the data from which protein quantity values should be taken.
Will override \code{quantity_pattern} if both are supplied}

\item{experiment_id_func}{Optional function to transform vector of column
names for quantity columns into experiment IDs matching the contents of the
\code{Experiment} column from the \code{config} data. If not given, samples are
assigned a number based on order of appearance in the data.}

\item{pep_n_col_name}{Optional character. The exact name of a column in the
data from which number of peptide matches should be taken. If given, assumes
single record per protein and does not use sequences.}

\item{match_n_col_name}{Optional character. The exact name of a column in the
data from which number of PSM matches should be taken. Used if present and
\code{pep_col_name} is given.}

\item{seq_col_name}{Optional character. The exact name of a column in the
data from which peptide sequences should be taken to calculate number of
peptide matches. Will be ignored if \code{pep_col_name} is given. If not given,
number of peptide IDs per protein will be estimated from number of identical
rows in data per protein.}

\item{seq_col_func}{Optional function to transform peptide sequence column to
extract peptide canonical sequence (used to differentiate peptide matches
per protein from total spectrum matches)}

\item{silent}{Boolean. If true, will run silently, without console output.}

\item{...}{Arguments to pass to \code{read.table()} or \code{read_excel()}}
}
\value{
A tibble giving the TPP protein quantity data relative to the lowest
temperature, \eqn{T_1}, as \emph{rel_quantity}, in a tidier format: 1 row
per protein observation.
}
\description{
\code{import_custom_format()} imports tabular proteomics data from a delimited
text file or \emph{.xlsx} spreadsheet and prepares it for TPP data analysis,
allowing a specification for a given proteomics software file type to be
easily and consistently produced:
\itemize{
\item Columns specified using the given arguments are selected from the data,
according to the vendor file format
\item Experiment condition combinations (treatment, temperature, \emph{etc.}) are
loaded from a separate config file and matched to recorded data
\item The necessary transformations are performed so the data can be analysed for
\emph{thermal protein profiling (TPP)} data: combining data points so that
a single data point is presented for each experiment combination and
recording the number of peptide hits for each protein as far as that's
possible from the data - this allows the use of minimum matches as a
quality control.
\item The data is reshaped into a tidier long format \code{tibble}, with one
observation per row, one column per statistic.
}
}
\examples{
# Single protein - Spectronaut format
sp_report_file <-
  system.file("extdata", "ATIC_Peptide_Report.csv", package = "tidyTPP")
config_file <-
  system.file("extdata", "ATIC_config.csv", package = "tidyTPP")

# Load data using paramaters for exported spectronaut report .csv
# Regex function to extract experiment ID:
# digits following "Sample_"
experiment_id_func = \(x) gsub(".*Sample_(\\\\d+)_.*", "\\\\1", x)

# Regex function to extract canonical sequence from precursor ID:
# remove leading and trailing "_", charge (as ".x") where x is a digit,
# and modification labels in "[]"
seq_col_func = \(x) gsub("_|(\\\\.\\\\d+)|(\\\\[.*\\\\])", "", x)

sp_tbl <- import_custom_format(
  # Report file
  datafile = sp_report_file,
  # Configuration
  config = config_file,
  # Spectronaut uses wider data format
  table_format = "wide",
  # Use quantity column pattern for multiple quantity columns
  protein_id_col_name = "PG.Genes",
  quantity_pattern = "PG.Quantity",
  experiment_id_func = experiment_id_func,
  # Use sequence column to generate number of peptide matches
  seq_col_name = "EG.PrecursorId",
  seq_col_func = seq_col_func
)
sp_tbl

}
